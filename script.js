// --- START: Environment Configuration ---
const defaultConfig = {
    FIREBASE_API_KEY: "",
    FIREBASE_AUTH_DOMAIN: "",
    FIREBASE_PROJECT_ID: "",
    FIREBASE_STORAGE_BUCKET: "",
    FIREBASE_MESSAGING_SENDER_ID: "",
    FIREBASE_APP_ID: "",
    FIREBASE_MEASUREMENT_ID: "",
    TGJU_PROXY_URL: ""
};
const ENV = window.env || defaultConfig;
const firebaseConfig = {
    apiKey: ENV.FIREBASE_API_KEY,
    authDomain: ENV.FIREBASE_AUTH_DOMAIN,
    projectId: ENV.FIREBASE_PROJECT_ID,
    storageBucket: ENV.FIREBASE_STORAGE_BUCKET,
    messagingSenderId: ENV.FIREBASE_MESSAGING_SENDER_ID,
    appId: ENV.FIREBASE_APP_ID,
    measurementId: ENV.FIREBASE_MEASUREMENT_ID
};
const TGJU_PROXY_URL = ENV.TGJU_PROXY_URL;
// --- END: Environment Configuration ---

// Initialize Firebase
const app = firebase.initializeApp(firebaseConfig);
const auth = firebase.auth();
const db = firebase.firestore();
const googleProvider = new firebase.auth.GoogleAuthProvider();
let currentUser = null;
let portfolioListener = null;


const HISTORY_KEY_GUEST = 'goldCalcPortfolio_GUEST';
const CACHED_PRICES_KEY = 'goldCalcCachedPrices';
const ONBOARDING_TOUR_KEY = 'goldCalcOnboardingTour';
const MAX_HISTORY_ITEMS = 50;
const ITEMS_PER_PAGE = 10;
const MESGHAL_TO_GRAM = 4.60833;
const REFRESH_INTERVAL = 1 * 60 * 1000;
const RETRY_INTERVAL = 10 * 1000;

let lastUpdateTime = null;
let priceUpdateInterval = null;
let countdownInterval = null;
let retryTimeout = null;
let retryCountdownInterval = null;
let lastCalculationResult = null;
let lastCurrentPortfolioPL = null;
let lastTotalPortfolioPL = null;
let activeItemsShown = 0;
let soldItemsShown = 0;

const CURRENCY_INFO = {
    'دلار آمریکا': { id: '137203', name: 'دلار آمریکا', symbol: '$' },
    'یورو': { id: '137205', name: 'یورو', symbol: '€' },
    'پوند انگلیس': { id: '137207', name: 'پوند انگلیس', symbol: '£' },
    'لیر ترکیه': { id: '137225', name: 'لیر ترکیه', symbol: '₺' },
    'دینار عراق': { id: '137217', name: 'دینار عراق', symbol: 'IQD' }
};

const goldPrices = { "طلای 18 عیار": null, "طلای 24 عیار": null, "طلای دست دوم": null, "مثقال طلا": null };
Object.keys(CURRENCY_INFO).forEach(name => goldPrices[name] = null);
let prevGoldPrices = { ...goldPrices };

const goldTypeVisuals = {
    'نو/زینتی': { label: 'طلای نو', tagClass: 'tag-new', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 20.94c1.5 0 2.75 1.06 4 0s2.5-1.06 4 0c1.5 0 2.75 1.06 4 0s2.5-1.06 4 0V4.06c-1.5 0-2.75-1.06-4 0s-2.5 1.06-4 0c-1.5 0-2.75-1.06-4 0s-2.5 1.06-4 0z"/><path d="M4 4.06V20.94"/><path d="M20 20.94V4.06"/></svg>` },
    'دست دوم': { label: 'دست دوم', tagClass: 'tag-used', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M20 18c.6 0 1-.4 1-1v-1a2 2 0 0 0-2-2h-2"/><path d="M4 18c-.6 0-1-.4-1-1v-1a2 2 0 0 1 2-2h2"/><path d="M10 14h4"/><path d="M18 10V8a2 2 0 0 0-2-2h-2"/><path d="M6 10V8a2 2 0 0 1 2-2h2"/><path d="m12 14 2 2 2-2"/><path d="m12 10-2-2-2 2"/></svg>` },
    'آب‌شده': { label: 'آب‌شده', tagClass: 'tag-melted', icon: `<svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M12 9.5c-2-2.8-4-5-4-5.5 0-2 2-3.5 4-3.5s4 1.5 4 3.5c0 .5-2 2.7-4 5.5z"/><path d="M12 20.5c-5.5-5.5-5.5-12 0-17 5.5 5 5.5 11.5 0 17z"/></svg>` }
};

const SKELETON_LOADER_HTML = `
<div class="skeleton-history-loader">
    <article class="history-item skeleton"><div class="history-item-summary"><div class="history-item-main"><div class="history-item-icon skeleton skeleton-circle"></div><div class="history-item-info"><span class="spec skeleton skeleton-text"></span><span class="date skeleton skeleton-text short"></span></div></div><div class="history-item-pl skeleton"></div></div></article>
    <article class="history-item skeleton" style="animation-delay: 80ms;"><div class="history-item-summary"><div class="history-item-main"><div class="history-item-icon skeleton skeleton-circle"></div><div class="history-item-info"><span class="spec skeleton skeleton-text"></span><span class="date skeleton skeleton-text short"></span></div></div><div class="history-item-pl skeleton"></div></div></article>
</div>`;

// --- DOM References ---
const body = document.body;
const autoCalcForm = document.getElementById('auto-price-calculator');
const manualCalcForm = document.getElementById('manual-price-calculator');
const autoCalcButton = document.getElementById('calculate-auto-btn');
const manualCalcButton = document.getElementById('calculate-manual-btn');
const clearAutoBtn = document.getElementById('clear-auto-btn');
const clearManualBtn = document.getElementById('clear-manual-btn');
const historyContainer = document.getElementById('history-container');
const soldHistoryContainer = document.getElementById('sold-history-container');
const showMoreActiveBtn = document.getElementById('show-more-active');
const showMoreSoldBtn = document.getElementById('show-more-sold');
const historySearchInput = document.getElementById('history-search-input');
const historyFilterSelect = document.getElementById('history-filter');
const historySortSelect = document.getElementById('history-sort');
const priceTable = document.getElementById('goldTable');
const resultDiv = document.getElementById('result');
const themeToggleButton = document.getElementById('theme-toggle-btn');
const sunIcon = document.getElementById('theme-icon-sun');
const moonIcon = document.getElementById('theme-icon-moon');
const totalProfitLossCard = document.getElementById('total-profit-loss-card');
const totalProfitLossContainer = document.getElementById('total-profit-loss-container');
const toastContainer = document.getElementById('toast-container');
const converterValueInput = document.getElementById('converter-value');
const converterResultDiv = document.getElementById('converter-result');
const confirmationModal = document.getElementById('confirmation-modal');
const modalMessage = document.getElementById('modal-message');
let modalConfirmBtn = document.getElementById('modal-confirm-btn');
const modalCancelBtn = document.getElementById('modal-cancel-btn');
const sellModal = document.getElementById('sell-modal');
const mobileNav = document.getElementById('mobile-nav');
const currencyCard = document.getElementById('currency-card');
const currencyAmountInput = document.getElementById('currency-amount');
const currencyAmountLabel = document.getElementById('currency-amount-label');
const currencyManualPriceGroup = document.getElementById('currency-manual-price-group');
const currencyManualPriceInput = document.getElementById('currency-manual-price');
const currencyLivePriceDisplay = document.getElementById('currency-live-price-display');
const livePriceValueSpan = document.getElementById('live-price-value');
const calculateCurrencyBtn = document.getElementById('calculate-currency-btn');
const clearCurrencyBtn = document.getElementById('clear-currency-btn');
const currencyResultDiv = document.getElementById('currency-result');
const navToggleCheckbox = document.getElementById('nav-toggle-checkbox');
const loginBtn = document.getElementById('login-btn');
const logoutBtn = document.getElementById('logout-btn');
const logoutBtnMobile = document.getElementById('logout-btn-mobile');
const mobileLogoutItem = document.getElementById('mobile-logout-item');
const userProfileDiv = document.getElementById('user-profile');
const userAvatarContainer = document.getElementById('user-avatar-container');
const userNameSpan = document.getElementById('user-name');
const userPicImg = document.getElementById('user-pic');
const defaultAvatarIcon = document.getElementById('default-avatar-icon');
const userMenuDropdown = document.getElementById('user-menu-dropdown');
const manualPriceHelper = document.getElementById('manual-price-helper');
const currentLiveGoldPriceSpan = document.getElementById('current-live-gold-price');
const manualCurrencyPriceHelper = document.getElementById('manual-currency-price-helper');
const currentLiveCurrencyPriceSpan = document.getElementById('current-live-currency-price');
const manualCurrencyPriceLabel = document.getElementById('manual-currency-price-label');

// --- Helper Functions ---
function updateManualPriceHelper() {
    try {
        const goldType = document.querySelector('input[name="gold-type-manual-tabs"]:checked')?.value || 'نو/زینتی';
        const priceManualLabelSpan = document.querySelector('label[for="price-manual"] .label');

        if (goldType === 'دست دوم') {
            if (priceManualLabelSpan) priceManualLabelSpan.textContent = 'قیمت هر گرم دست دوم';
            const liveUsedPrice = goldPrices["طلای دست دوم"]?.price;
            if (liveUsedPrice) {
                currentLiveGoldPriceSpan.textContent = formatterPrice(liveUsedPrice);
                manualPriceHelper.classList.remove('hidden');
            } else {
                manualPriceHelper.classList.add('hidden');
            }
            return;
        }

        const caratRadioVal = document.querySelector('input[name="carat-manual-tabs"]:checked')?.value || '750';
        const getLivePrice = () => {
            const p18 = goldPrices["طلای 18 عیار"]?.price || null;
            if (goldType === 'آب‌شده' || caratRadioVal === '750') return { live: p18, labelCarat: 18 };
            if (caratRadioVal === '999') return { live: p18 ? p18 * (999 / 750) : null, labelCarat: 24 };
            return { live: null, labelCarat: 18 };
        };

        const { live, labelCarat } = getLivePrice();
        if (priceManualLabelSpan) priceManualLabelSpan.textContent = `قیمت هر گرم ${labelCarat} عیار`;

        if (live && !isNaN(live)) {
            currentLiveGoldPriceSpan.textContent = formatterPrice(live);
            manualPriceHelper.classList.remove('hidden');
        } else {
            manualPriceHelper.classList.add('hidden');
        }
    } catch (e) {
        manualPriceHelper.classList.add('hidden');
    }
}

function updateCurrencyManualPriceHelper() {
    const selectedCurrencyName = document.querySelector('input[name="currency-tabs"]:checked').value;
    const livePriceData = goldPrices[selectedCurrencyName];
    if (livePriceData?.price) {
        manualCurrencyPriceLabel.textContent = `قیمت لحظه‌ای ${selectedCurrencyName}:`;
        currentLiveCurrencyPriceSpan.textContent = formatterPrice(livePriceData.price);
        manualCurrencyPriceHelper.classList.remove('hidden');
    } else {
        manualCurrencyPriceHelper.classList.add('hidden');
    }
}


// --- INITIALIZATION ---
window.onload = function () {
    applyInitialTheme();
    setupEventListeners();
    setupParticleAnimation();
    displaySkeletonLoader();
    showPortfolioSkeletons();
    initAuthListener();
    fetchPricesFromTgju(true);
    validateForm(autoCalcForm, autoCalcButton, false);
    handleConversion();
    setupCurrencyCalculator();
    setupMobileNav();
    setupScrollObserver();
    window.addEventListener('resize', handleResize);
    handleResize();
};

function setupEventListeners() {
    themeToggleButton.addEventListener('click', toggleTheme);
    loginBtn.addEventListener('click', () => { closeMobileMenu(); signInWithGoogle(); });
    logoutBtn.addEventListener('click', signOutUser);
    logoutBtnMobile.addEventListener('click', () => { closeMobileMenu(); signOutUser(); });
    userAvatarContainer.addEventListener('click', (e) => { e.stopPropagation(); toggleUserMenu(); });
    document.addEventListener('click', (e) => { if (userAvatarContainer && !userAvatarContainer.contains(e.target)) closeUserMenu(); });
    document.getElementById('radio-1').addEventListener('change', () => switchCalculatorMode('auto'));
    document.getElementById('radio-2').addEventListener('change', () => switchCalculatorMode('manual'));
    document.getElementById('radio-3').addEventListener('change', () => switchCalculatorMode('converter'));
    autoCalcButton.addEventListener('click', () => calculateAuto(true));
    manualCalcButton.addEventListener('click', () => calculateManual(true));
    clearAutoBtn.addEventListener('click', () => clearForm(autoCalcForm, autoCalcButton, resultDiv));
    clearManualBtn.addEventListener('click', () => clearForm(manualCalcForm, manualCalcButton, resultDiv));
    clearCurrencyBtn.addEventListener('click', clearCurrencyForm);
    document.querySelectorAll('input[name="gold-type-auto-tabs"], input[name="gold-type-manual-tabs"]').forEach(radio => {
        radio.addEventListener('change', () => updateFormVisibility(radio.closest('div[role="tabpanel"]').id.includes('auto') ? 'auto' : 'manual'));
    });
    document.querySelectorAll('.calc-input').forEach(input => {
        input.addEventListener('input', (event) => {
            const form = event.target.closest('div[role="tabpanel"], .modal-content');
            if (!form || form.id.includes('converter')) return;
            if (event.target.id.includes('price-manual')) formatNumberInput(event.target);
            const button = form.querySelector('button[id^="calculate-"]');
            if(button) validateForm(form, button, false);
        });
        input.addEventListener('keypress', (event) => {
            if (event.key === 'Enter') {
                event.preventDefault();
                const form = input.closest('div[role="tabpanel"]');
                if (form && !form.id.includes('converter')) {
                    const button = form.querySelector('button[id^="calculate-"]');
                    if (button && !button.disabled) button.click();
                }
            }
        });
    });
    historySearchInput.addEventListener('input', () => loadFilteredPortfolioData(true));
    historyFilterSelect.addEventListener('change', () => loadFilteredPortfolioData(true));
    historySortSelect.addEventListener('change', () => loadFilteredPortfolioData(true));
    showMoreActiveBtn.addEventListener('click', () => loadFilteredPortfolioData(false, 'active'));
    showMoreSoldBtn.addEventListener('click', () => loadFilteredPortfolioData(false, 'sold'));
    converterValueInput.addEventListener('input', handleConversion);
    document.querySelectorAll('input[name="from-unit-tabs"], input[name="to-unit-tabs"]').forEach(radio => {
        radio.addEventListener('change', handleConversion);
    });
    modalCancelBtn.addEventListener('click', hideConfirmationModal);
    confirmationModal.addEventListener('click', (e) => { if (e.target === confirmationModal) hideConfirmationModal() });
    sellModal.addEventListener('click', (e) => { if (e.target === sellModal) hideSellModal() });
    document.addEventListener('click', event => {
        if (event.target && (event.target.id === 'add-to-portfolio-btn' || event.target.id === 'add-to-portfolio-btn-tour')) {
            saveCalculation();
        }
    });
    document.querySelectorAll('input[name="carat-manual-tabs"], input[name="gold-type-manual-tabs"]').forEach(r => r.addEventListener('change', updateManualPriceHelper));
    document.getElementById('carat-manual')?.addEventListener('input', updateManualPriceHelper);
}


function showMobileSection(targetId) { if (window.innerWidth >= 992) return; document.querySelectorAll('#app-wrapper > section').forEach(section => section.classList.toggle('mobile-active', section.id === targetId)); }
function setupMobileNav() { const mobileNavButtons = document.querySelectorAll('.mobile-nav-btn'); mobileNavButtons.forEach(btn => { btn.addEventListener('click', () => { mobileNavButtons.forEach(b => b.classList.remove('active')); btn.classList.add('active'); const targetId = btn.dataset.target; const targetElement = document.getElementById(targetId); if (targetElement) { showMobileSection(targetId); const headerOffset = 64; const elementPosition = targetElement.getBoundingClientRect().top; const offsetPosition = elementPosition + window.pageYOffset - headerOffset; window.scrollTo({ top: offsetPosition, behavior: "smooth" }); } }); }); }
function setupScrollObserver() { if (window.innerWidth >= 992) return; const sections = document.querySelectorAll('#app-wrapper > section'); const observer = new IntersectionObserver((entries) => { entries.forEach(entry => { if (entry.isIntersecting) { const targetId = entry.target.id; document.querySelectorAll('.mobile-nav-btn').forEach(btn => { btn.classList.toggle('active', btn.dataset.target === targetId); }); } }); }, { root: null, rootMargin: "-40% 0px -60% 0px", threshold: 0 }); sections.forEach(section => observer.observe(section)); }
function handleResize() { if (window.innerWidth >= 992) { document.querySelectorAll('#app-wrapper > section').forEach(section => { section.classList.remove('mobile-active'); section.style.display = ''; }); } else { const activeBtn = document.querySelector('.mobile-nav-btn.active'); showMobileSection(activeBtn ? activeBtn.dataset.target : 'calculator-card'); } }

function initAuthListener() { body.classList.add('auth-loading'); let isInitialLoad = true; auth.onAuthStateChanged(async (user) => { if (portfolioListener) { portfolioListener(); portfolioListener = null; } const wasPreviouslyLoggedIn = !!currentUser; currentUser = user ? { uid: user.uid, displayName: user.displayName, photoURL: user.photoURL } : null; updateUserUI(user); if (!isInitialLoad) { if (!wasPreviouslyLoggedIn && user) { showToast(`خوش آمدید، ${user.displayName}!`, 'success'); await syncGuestHistoryToFirestore(); } else if (wasPreviouslyLoggedIn && !user) { showToast('با موفقیت خارج شدید.'); } } loadPortfolio(true); isInitialLoad = false; body.classList.remove('auth-loading'); }); }
function updateUserUI(user) { if (user) { userNameSpan.textContent = user.displayName; userPicImg.onerror = () => { userPicImg.classList.add('hidden'); defaultAvatarIcon.classList.remove('hidden'); }; userPicImg.src = user.photoURL || ''; userPicImg.classList.toggle('hidden', !user.photoURL); defaultAvatarIcon.classList.toggle('hidden', !!user.photoURL); userProfileDiv.classList.remove('hidden'); loginBtn.classList.add('hidden'); mobileLogoutItem.classList.remove('hidden'); } else { userProfileDiv.classList.add('hidden'); loginBtn.classList.remove('hidden'); mobileLogoutItem.classList.add('hidden'); closeUserMenu(); } }
function closeMobileMenu() { if (navToggleCheckbox.checked) navToggleCheckbox.checked = false; }
function toggleUserMenu() { userMenuDropdown.classList.toggle('is-open'); userAvatarContainer.setAttribute('aria-expanded', userMenuDropdown.classList.contains('is-open')); }
function closeUserMenu() { if (userMenuDropdown.classList.contains('is-open')) { userMenuDropdown.classList.remove('is-open'); userAvatarContainer.setAttribute('aria-expanded', 'false'); } }
function signInWithGoogle() { auth.signInWithPopup(googleProvider).catch(error => { console.error("Authentication Error: ", error); if (error.code !== 'auth/popup-closed-by-user') showToast('خطا در ورود. لطفاً دوباره تلاش کنید.', 'error'); }); }
function signOutUser() { auth.signOut().then(() => { if (typeof google !== 'undefined') { google.accounts.id.disableAutoSelect(); } }).catch(error => console.error("Sign Out Error: ", error)); }
async function syncGuestHistoryToFirestore() { const guestHistory = JSON.parse(localStorage.getItem(HISTORY_KEY_GUEST)); if (!guestHistory || guestHistory.length === 0 || !currentUser) return; showToast('در حال همگام‌سازی سفارشات محلی...', 'warning'); const batch = db.batch(); const userItemsRef = db.collection('orders').doc(currentUser.uid).collection('items'); guestHistory.forEach(item => batch.set(userItemsRef.doc(), { ...item, status: 'active' })); try { await batch.commit(); localStorage.removeItem(HISTORY_KEY_GUEST); showToast('سفارشات شما با موفقیت همگام‌سازی شد!', 'success'); } catch (error) { console.error("Error syncing guest history:", error); showToast('خطا در همگام‌سازی تاریخچه.', 'error'); } }

async function saveCalculation() { if (!lastCalculationResult) return; const fullData = { ...lastCalculationResult, date: new Date().toISOString(), status: 'active' }; if (currentUser) { try { await db.collection('orders').doc(currentUser.uid).collection('items').add(fullData); showToast('به سبد دارایی اضافه شد.', 'success'); } catch (error) { console.error("Error saving to Firestore: ", error); showToast('خطا در ذخیره‌سازی آنلاین.', 'error'); } } else { let h = JSON.parse(localStorage.getItem(HISTORY_KEY_GUEST)) || []; h.unshift(fullData); localStorage.setItem(HISTORY_KEY_GUEST, JSON.stringify(h.slice(0, MAX_HISTORY_ITEMS))); showToast('سفارش به صورت محلی ذخیره شد (برای ذخیره دائمی وارد شوید).', 'warning'); loadPortfolio(true); } resultDiv.innerHTML = '<p>برای مشاهده نتیجه، اطلاعات را وارد کرده و روی دکمه محاسبه کلیک کنید.</p>'; currencyResultDiv.innerHTML = '<p>برای مشاهده نتیجه، اطلاعات را وارد کرده و روی دکمه محاسبه کلیک کنید.</p>'; lastCalculationResult = null; }
function loadPortfolio(isInitialLoadOrFilterChange = true) { const hasAnyPrice = goldPrices["طلای 18 عیار"]?.price || Object.values(CURRENCY_INFO).some(c => goldPrices[c.name]?.price); if (!hasAnyPrice && isInitialLoadOrFilterChange) { showPortfolioSkeletons(); return; } if (currentUser) { if (portfolioListener && !isInitialLoadOrFilterChange) return; if (portfolioListener) portfolioListener(); const userItemsRef = db.collection('orders').doc(currentUser.uid).collection('items'); portfolioListener = userItemsRef.onSnapshot(snapshot => { let allOrders = []; snapshot.forEach(doc => allOrders.push({ id: doc.id, ...doc.data() })); window.currentPortfolioData = allOrders; loadFilteredPortfolioData(true); }, error => { console.error("Error with portfolio listener:", error); showToast("خطا در همگام‌سازی سبد دارایی.", "error"); showPortfolioSkeletons(); }); } else { const guestData = JSON.parse(localStorage.getItem(HISTORY_KEY_GUEST)) || []; window.currentPortfolioData = guestData.map(item => ({ id: item.id || item.date, ...item })); loadFilteredPortfolioData(isInitialLoadOrFilterChange); } }
function loadFilteredPortfolioData(isInitialLoadOrFilterChange = false, listToLoadMore = null) { const allOrders = window.currentPortfolioData || []; const currentPrice18 = goldPrices["طلای 18 عیار"]?.price; if (isInitialLoadOrFilterChange) { activeItemsShown = 0; soldItemsShown = 0; historyContainer.innerHTML = ''; soldHistoryContainer.innerHTML = ''; } if (!listToLoadMore || listToLoadMore === 'active') { loadFilteredOrders(allOrders.filter(o => o.status === 'active'), historyContainer, currentPrice18, isInitialLoadOrFilterChange, false); } if (!listToLoadMore || listToLoadMore === 'sold') { loadFilteredOrders(allOrders.filter(o => o.status === 'sold'), soldHistoryContainer, currentPrice18, isInitialLoadOrFilterChange, true); } calculateAndDisplayTotalProfitLoss(allOrders, currentPrice18, isInitialLoadOrFilterChange); }
function loadFilteredOrders(orders, container, currentPrice18, isReset, isSoldList) { const searchTerm = historySearchInput.value.toLowerCase(); const filter = historyFilterSelect.value; const sort = historySortSelect.value; let filteredOrders = orders.filter(item => (filter === 'all' || (item.goldType === 'ارز' ? 'ارز' : item.goldType) === filter) && (!searchTerm.trim() || (item.goldType === 'ارز' ? `${item.currencyName} ${item.amount}` : `${item.goldType} ${item.weight} ${item.carat}`).toLowerCase().includes(searchTerm))); filteredOrders.sort((a, b) => { if (sort === 'date-asc') return new Date(a.date) - new Date(b.date); let profitA = calculateProfitLoss(a, currentPrice18); let profitB = calculateProfitLoss(b, currentPrice18); if (sort === 'profit-desc') return profitB - profitA; if (sort === 'loss-desc') return profitA - profitB; return new Date(b.date) - new Date(a.date); }); const itemsShown = isSoldList ? soldItemsShown : activeItemsShown; const ordersToShow = filteredOrders.slice(itemsShown, itemsShown + ITEMS_PER_PAGE); const fragment = document.createDocumentFragment(); const emptyStateMessage = isSoldList ? "سفارش فروخته شده‌ای یافت نشد." : "شما هنوز دارایی فعالی ندارید."; if (filteredOrders.length === 0 && isReset) { container.innerHTML = `<div class="history-empty-state"><p>${emptyStateMessage}</p></div>`; } else { ordersToShow.forEach((item, index) => { const itemArticle = renderPortfolioItem(item, currentPrice18, isReset); itemArticle.style.animationDelay = `${index * 80}ms`; fragment.appendChild(itemArticle); }); container.appendChild(fragment); } const showMoreBtn = isSoldList ? showMoreSoldBtn : showMoreActiveBtn; const newTotalShown = itemsShown + ordersToShow.length; if (isSoldList) { soldItemsShown = newTotalShown; } else { activeItemsShown = newTotalShown; } showMoreBtn.classList.toggle('hidden', newTotalShown >= filteredOrders.length); }
function calculateProfitLoss(item, currentPrice18) { if (item.status === 'sold') return item.finalProfitLoss || 0; if (item.goldType === 'ارز') { const currentPriceData = goldPrices[item.currencyName]; return (currentPriceData && currentPriceData.price > 0) ? (currentPriceData.price * item.amount) - item.finalValue : 0; } else { if (item.goldType === 'دست دوم') { const currentUsedPrice = goldPrices["طلای دست دوم"]?.price; return currentUsedPrice > 0 ? (item.weight * currentUsedPrice) - item.finalValue : 0; } else { return currentPrice18 > 0 ? (item.weight * (currentPrice18 / 750) * item.carat) - item.finalValue : 0; } } }
function renderPortfolioItem(item, currentPrice18, isInitialLoad) { if (!item || !item.date) return document.createElement('div'); const date = new Intl.DateTimeFormat('fa-IR', { dateStyle: 'short', timeStyle: 'short' }).format(new Date(item.date)); const profitLoss = calculateProfitLoss(item, currentPrice18); let plClass = profitLoss > 1 ? 'profit' : profitLoss < -1 ? 'loss' : 'neutral'; let plLabel = item.status === 'sold' ? 'سود/زیان نهایی' : 'سود/زیان فعلی'; const plIcon = profitLoss > 1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 14l5-5 5 5z"/></svg>` : profitLoss < -1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 10l5 5 5-5z"/></svg>` : ''; let itemMainContent = '', itemIconHTML = '', tagClass = ''; if (item.goldType === 'ارز') { const currency = CURRENCY_INFO[item.currencyName] || { symbol: '?', name: item.currencyName }; itemIconHTML = currency.symbol; tagClass = 'tag-currency'; itemMainContent = `<span class="spec">${formatterPrice(item.amount)} <span class="gold-tag ${tagClass}">${currency.name}</span></span>`; } else { const visuals = goldTypeVisuals[item.goldType] || goldTypeVisuals['نو/زینتی']; itemIconHTML = visuals.icon; tagClass = visuals.tagClass; itemMainContent = `<span class="spec">${item.weight} گرم <span class="gold-tag ${tagClass}">${visuals.label}</span></span>`; } const itemArticle = document.createElement('article'); itemArticle.className = `history-item ${item.status === 'sold' ? 'sold-item' : ''}`; itemArticle.setAttribute('data-id', item.id); itemArticle.innerHTML = `<div class="history-item-summary" role="button" aria-expanded="false"><div class="history-item-main"><div class="history-item-icon ${tagClass}">${itemIconHTML}</div><div class="history-item-info">${itemMainContent}<span class="date">${date}</span></div></div><div class="history-item-pl ${plClass}" data-pl-container><span class="pl-label">${plLabel}</span><span class="pl-value" data-pl-value>${isInitialLoad ? '' : `${plIcon} ${formatterPrice(Math.abs(profitLoss).toFixed(0))}`}</span></div></div><div class="history-item-details"></div>`; if (isInitialLoad) { setTimeout(() => { const plValueElement = itemArticle.querySelector('[data-pl-value]'); if (plValueElement) animateCounter(plValueElement, 0, profitLoss, true); }, 100); } const summary = itemArticle.querySelector('.history-item-summary'); const details = itemArticle.querySelector('.history-item-details'); summary.addEventListener('click', () => { const isOpen = itemArticle.classList.toggle('is-open'); summary.setAttribute('aria-expanded', isOpen); if (isOpen && !details.innerHTML) { details.innerHTML = generateDetailsHTML(item, profitLoss, currentPrice18); attachDetailButtonListeners(details, item); } }); return itemArticle; }
function generateDetailsHTML(item, profitLoss, currentPrice18) { const finalValue = item.finalValue; const plClass = profitLoss > 1 ? 'profit' : profitLoss < -1 ? 'loss' : 'neutral'; let purchaseDetailsHTML = '', breakdownHTML = '', currentValueStr = 'نامشخص', soldPriceHTML = ''; if (item.status === 'sold' && item.sellDate && item.sellPrice) { const sellDate = new Intl.DateTimeFormat('fa-IR', { dateStyle: 'short', timeStyle: 'short' }).format(new Date(item.sellDate)); const totalSellValue = item.sellPrice * (item.amount || item.weight); soldPriceHTML = `<tr><td>ارزش فروش:</td><td>${formatterPrice(totalSellValue.toFixed(0))} تومان</td></tr><tr><td>قیمت واحد فروش:</td><td>${formatterPrice(item.sellPrice.toFixed(0))} تومان</td></tr><tr><td>تاریخ فروش:</td><td>${sellDate}</td></tr>`; } if (item.goldType === 'ارز') { const currentPriceData = goldPrices[item.currencyName]; currentValueStr = (currentPriceData && currentPriceData.price) ? formatterPrice((currentPriceData.price * item.amount).toFixed(0)) + " تومان" : 'نامشخص'; purchaseDetailsHTML = `<table class="history-item-breakdown"><caption>مشخصات خرید</caption><tbody><tr><td>نوع دارایی:</td><td>ارز (${item.currencyName})</td></tr><tr><td>مقدار خرید:</td><td>${formatterPrice(item.amount)}</td></tr><tr><td>قیمت خرید هر واحد:</td><td>${formatterPrice(item.basePriceUsed)} تومان</td></tr>${item.commission ? `<tr><td>کارمزد خرید:</td><td>${item.commission}%</td></tr>` : ''}</tbody></table>`; breakdownHTML = `<table class="history-item-breakdown" style="margin-top: 1rem;"><caption>تحلیل سود و زیان</caption><tbody><tr><td>ارزش کل خرید:</td><td>${formatterPrice(finalValue.toFixed(0))} تومان</td></tr>${item.status !== 'sold' ? `<tr><td>ارزش فعلی (خام):</td><td data-current-value>${currentValueStr}</td></tr>` : soldPriceHTML}<tr class="final-row" style="border-top: 1px solid var(--border-color);"><td>سود/زیان:</td><td class="pl-value ${plClass}">${formatterPrice(profitLoss.toFixed(0))} تومان</td></tr></tbody></table>`; } else { currentValueStr = currentPrice18 ? formatterPrice((item.weight * (currentPrice18 / 750) * item.carat).toFixed(0)) + " تومان" : 'نامشخص'; purchaseDetailsHTML = `<table class="history-item-breakdown"><caption>مشخصات خرید</caption><tbody><tr><td>نوع طلا:</td><td>${item.goldType}</td></tr><tr><td>وزن:</td><td>${item.weight} گرم</td></tr><tr><td>عیار:</td><td>${item.carat}</td></tr><tr><td>قیمت مبنا (هر گرم ۱۸ عیار):</td><td>${formatterPrice(item.basePriceUsed)} تومان</td></tr></tbody></table>`; breakdownHTML = `<table class="history-item-breakdown" style="margin-top: 1rem;"><caption>تحلیل سود و زیان</caption><tbody><tr><td>ارزش کل خرید:</td><td>${formatterPrice(finalValue.toFixed(0))} تومان</td></tr>${item.status !== 'sold' ? `<tr><td>ارزش فعلی (خام):</td><td data-current-value>${currentValueStr}</td></tr>` : soldPriceHTML}<tr class="final-row" style="border-top: 1px solid var(--border-color);"><td>سود/زیان:</td><td class="pl-value ${plClass}">${formatterPrice(profitLoss.toFixed(0))} تومان</td></tr></tbody></table>`; } const footerButtons = item.status !== 'sold' ? `<button class="modal-button secondary reuse-btn" aria-label="استفاده مجدد">استفاده مجدد</button><button class="modal-button primary sell-btn" aria-label="فروش">فروش</button><button class="modal-button danger delete-btn" aria-label="حذف سفارش">حذف</button>` : `<button class="modal-button danger delete-btn" aria-label="حذف سفارش">حذف</button>`; return `${purchaseDetailsHTML}${breakdownHTML}<div class="history-item-footer">${footerButtons}</div>`; }
function attachDetailButtonListeners(detailsContainer, item) { detailsContainer.querySelector('.reuse-btn')?.addEventListener('click', (e) => { e.stopPropagation(); reuseCalculation(item); }); detailsContainer.querySelector('.sell-btn')?.addEventListener('click', (e) => { e.stopPropagation(); showSellModal(item); }); detailsContainer.querySelector('.delete-btn').addEventListener('click', (e) => { e.stopPropagation(); showConfirmationModal('آیا از حذف این سفارش مطمئن هستید؟ این عمل غیرقابل بازگشت است.', () => deleteHistoryItem(item.id), 'حذف', 'danger'); }); }
async function sellHistoryItem(id, finalProfitLoss, sellPrice) { const itemRef = currentUser ? db.collection('orders').doc(currentUser.uid).collection('items').doc(id) : null; try { const updateData = { status: 'sold', finalProfitLoss, sellPrice, sellDate: new Date().toISOString() }; if (itemRef) { await itemRef.update(updateData); } else { let h = JSON.parse(localStorage.getItem(HISTORY_KEY_GUEST)) || []; const itemIndex = h.findIndex(item => item.date === id || item.id === id); if (itemIndex > -1) { h[itemIndex] = { ...h[itemIndex], ...updateData }; localStorage.setItem(HISTORY_KEY_GUEST, JSON.stringify(h)); } loadPortfolio(true); } showToast('آیتم با موفقیت فروخته شد.', 'success'); } catch (error) { console.error("Error selling item: ", error); showToast('خطا در فروش آیتم.', 'error'); } }
async function deleteHistoryItem(id) { const itemElement = document.querySelector(`.history-item[data-id="${id}"]`); if (itemElement) itemElement.classList.add('is-deleting'); if (navigator.vibrate) { navigator.vibrate(100); } try { if (currentUser) { await db.collection('orders').doc(currentUser.uid).collection('items').doc(id).delete(); } else { let h = JSON.parse(localStorage.getItem(HISTORY_KEY_GUEST)) || []; localStorage.setItem(HISTORY_KEY_GUEST, JSON.stringify(h.filter(item => item.id !== id && item.date !== id))); loadPortfolio(true); } showToast('سفارش حذف شد.'); } catch (error) { console.error("Error deleting item: ", error); showToast('خطا در حذف سفارش.', 'error'); if (itemElement) itemElement.classList.remove('is-deleting'); } }
function calculateAndDisplayTotalProfitLoss(history, currentPrice18, isInitialLoad = false) { if (!history || history.length === 0) { totalProfitLossContainer.innerHTML = '<div class="history-empty-state"><p>سبد دارایی شما خالی است.</p></div>'; lastCurrentPortfolioPL = null; lastTotalPortfolioPL = null; return; } if (!totalProfitLossContainer.querySelector('.total-pl-grid')) { totalProfitLossContainer.innerHTML = `<div class="total-pl-grid"><div class="total-profit-loss-display"><span class="label">سود / زیان سبد فعلی</span><span class="profit-loss-value neutral" data-current-pl>...</span></div><div class="total-profit-loss-display"><span class="label">سود / زیان کل</span><span class="profit-loss-value neutral" data-total-pl>...</span></div></div>`; } const hasAnyPrice = currentPrice18 || Object.keys(CURRENCY_INFO).some(name => goldPrices[name] && goldPrices[name].price); if (!hasAnyPrice) return; const currentPlElement = totalProfitLossContainer.querySelector('[data-current-pl]'); const totalPlElement = totalProfitLossContainer.querySelector('[data-total-pl]'); if (!currentPlElement || !totalPlElement) return; const activeOrders = history.filter(item => item.status === 'active'); const newCurrentPL = activeOrders.reduce((acc, item) => acc + calculateProfitLoss(item, currentPrice18), 0); const newTotalPL = history.reduce((acc, item) => acc + calculateProfitLoss(item, currentPrice18), 0); const oldCurrentPL = isInitialLoad ? 0 : (lastCurrentPortfolioPL !== null ? lastCurrentPortfolioPL : newCurrentPL); animateCounter(currentPlElement, oldCurrentPL, newCurrentPL, false, true); lastCurrentPortfolioPL = newCurrentPL; const oldTotalPL = isInitialLoad ? 0 : (lastTotalPortfolioPL !== null ? lastTotalPortfolioPL : newTotalPL); animateCounter(totalPlElement, oldTotalPL, newTotalPL, false, true); lastTotalPortfolioPL = newTotalPL; }
function showPortfolioSkeletons() { totalProfitLossContainer.innerHTML = `<div class="skeleton-summary-loader"><div class="total-profit-loss-display"><div class="skeleton skeleton-text" style="width: 60%; height: 0.9rem;"></div><div class="skeleton skeleton-text" style="width: 80%; height: 1.5rem; margin-top: 0.5rem;"></div></div><div class="total-profit-loss-display"><div class="skeleton skeleton-text" style="width: 50%; height: 0.9rem;"></div><div class="skeleton skeleton-text" style="width: 70%; height: 1.5rem; margin-top: 0.5rem;"></div></div></div>`; historyContainer.innerHTML = SKELETON_LOADER_HTML; soldHistoryContainer.innerHTML = SKELETON_LOADER_HTML; showMoreActiveBtn.classList.add('hidden'); showMoreSoldBtn.classList.add('hidden'); }
function reuseCalculation(item) { const fieldsToHighlight = []; if (item.goldType === 'ارز') { showMobileSection('currency-card'); document.getElementById('currency-card').scrollIntoView({ behavior: 'smooth' }); const currencyRadio = document.querySelector(`input[name="currency-tabs"][value="${item.currencyName}"]`); if (currencyRadio) { currencyRadio.checked = true; currencyRadio.dispatchEvent(new Event('change')); } document.getElementById('price-mode-manual').checked = true; document.getElementById('price-mode-manual').dispatchEvent(new Event('change')); fieldsToHighlight.push(document.getElementById('currency-amount'), document.getElementById('currency-manual-price')); document.getElementById('currency-amount').value = item.amount; document.getElementById('currency-manual-price').value = formatterPrice(item.basePriceUsed); validateCurrencyForm(false); } else { showMobileSection('calculator-card'); document.getElementById('calculator-card').scrollIntoView({ behavior: 'smooth' }); document.getElementById('radio-2').checked = true; switchCalculatorMode('manual'); const typeToSelect = item.goldType || 'نو/زینتی'; const radioToSelect = document.querySelector(`input[name="gold-type-manual-tabs"][value="${typeToSelect}"]`); if (radioToSelect) { radioToSelect.checked = true; radioToSelect.dispatchEvent(new Event('change')); } fieldsToHighlight.push(document.getElementById('weight-manual')); document.getElementById('weight-manual').value = item.weight || ''; if (item.goldType === 'آب‌شده') { document.getElementById('carat-manual').value = item.carat || ''; fieldsToHighlight.push(document.getElementById('carat-manual')); } else { const caratRadio = document.getElementById(`carat-manual-${item.carat}`); if (caratRadio) { caratRadio.checked = true; caratRadio.dispatchEvent(new Event('change')); } } document.getElementById('commission-manual').value = item.commission || ''; document.getElementById('profit-manual').value = item.profit || ''; document.getElementById('tax-manual').value = item.tax || ''; document.getElementById('price-manual').value = formatterPrice(item.basePriceUsed); validateForm(manualCalcForm, manualCalcButton, false); } fieldsToHighlight.forEach(field => { if (field) { const parentInp = field.closest('.inp'); if (parentInp) { parentInp.classList.add('flash-highlight'); setTimeout(() => parentInp.classList.remove('flash-highlight'), 1500); } field.dispatchEvent(new Event('input')); } }); }
function showConfirmationModal(message, onConfirm, confirmText = 'حذف', buttonClass = 'danger') { modalMessage.textContent = message; const newConfirmBtn = modalConfirmBtn.cloneNode(true); newConfirmBtn.textContent = confirmText; newConfirmBtn.className = `modal-button ${buttonClass}`; const confirmAction = () => { onConfirm(); hideConfirmationModal(); }; newConfirmBtn.addEventListener('click', confirmAction, { once: true }); modalConfirmBtn.parentNode.replaceChild(newConfirmBtn, modalConfirmBtn); modalConfirmBtn = newConfirmBtn; confirmationModal.classList.remove('hidden'); }
function hideConfirmationModal() { confirmationModal.classList.add('hidden'); }
function showSellModal(item) { const itemName = sellModal.querySelector('#sell-modal-item-name'); const livePriceSpan = sellModal.querySelector('#sell-modal-live-price'); const manualPriceGroup = sellModal.querySelector('#sell-manual-price-group'); const manualPriceInput = sellModal.querySelector('#sell-manual-price'); const manualPriceLabel = sellModal.querySelector('#sell-manual-price-label'); const plValueSpan = sellModal.querySelector('#sell-modal-pl-value'); const confirmBtn = sellModal.querySelector('#sell-modal-confirm-btn'); const cancelBtn = sellModal.querySelector('#sell-modal-cancel-btn'); const radioLive = sellModal.querySelector('#sell-option-live'); const radioManual = sellModal.querySelector('#sell-option-manual'); let livePrice = 0; if (item.goldType === 'ارز') { const currencyData = goldPrices[item.currencyName]; livePrice = currencyData ? currencyData.price : 0; itemName.textContent = `${formatterPrice(item.amount)} ${item.currencyName}`; manualPriceLabel.textContent = `قیمت هر ${item.currencyName}`; } else { livePrice = goldPrices["طلای 18 عیار"]?.price || 0; itemName.textContent = `${item.weight} گرم طلای ${item.goldType}`; manualPriceLabel.textContent = `قیمت هر گرم ۱۸ عیار`; } livePriceSpan.textContent = `${formatterPrice(livePrice)}`; manualPriceInput.value = ''; radioLive.checked = true; manualPriceGroup.classList.add('hidden'); const calculateSellPL = (sellPrice) => { if (!sellPrice || isNaN(sellPrice) || sellPrice <= 0) { plValueSpan.textContent = '-'; plValueSpan.className = 'profit-loss-value neutral'; confirmBtn.disabled = true; return; } const currentItemRawValue = item.goldType === 'ارز' ? sellPrice * item.amount : item.weight * (sellPrice / 750) * item.carat; const finalPL = currentItemRawValue - item.finalValue; plValueSpan.textContent = formatterPrice(finalPL.toFixed(0)); plValueSpan.className = `profit-loss-value ${finalPL > 1 ? 'profit' : finalPL < -1 ? 'loss' : 'neutral'}`; confirmBtn.disabled = false; return finalPL; }; calculateSellPL(livePrice); const updateModalUI = () => { if (radioLive.checked) { manualPriceGroup.classList.add('hidden'); calculateSellPL(livePrice); } else { manualPriceGroup.classList.remove('hidden'); calculateSellPL(parseFloat(cleanNumber(manualPriceInput.value))); } }; manualPriceInput.addEventListener('input', () => { formatNumberInput(manualPriceInput); updateModalUI(); }); radioLive.addEventListener('change', updateModalUI); radioManual.addEventListener('change', updateModalUI); const confirmSellAction = () => { const sellPrice = radioLive.checked ? livePrice : parseFloat(cleanNumber(manualPriceInput.value)); if (!sellPrice || isNaN(sellPrice) || sellPrice <= 0) { showToast('قیمت فروش نامعتبر است.', 'error'); return; } const finalPL = calculateSellPL(sellPrice); sellHistoryItem(item.id, finalPL, sellPrice); hideSellModal(); }; const newConfirmBtn = confirmBtn.cloneNode(true); confirmBtn.parentNode.replaceChild(newConfirmBtn, confirmBtn); newConfirmBtn.addEventListener('click', confirmSellAction, { once: true }); const newCancelBtn = cancelBtn.cloneNode(true); cancelBtn.parentNode.replaceChild(newCancelBtn, cancelBtn); newCancelBtn.addEventListener('click', hideSellModal, { once: true }); sellModal.classList.remove('hidden'); }
function hideSellModal() { sellModal.classList.add('hidden'); }
function switchCalculatorMode(mode) { const modes = ['auto', 'manual', 'converter']; modes.forEach(m => { const panel = document.getElementById(`${m}-price-calculator`) || document.getElementById('unit-converter'); if (panel) panel.classList.toggle('hidden', m !== mode); }); resultDiv.classList.toggle('hidden', mode === 'converter'); if (mode === 'auto') { updateFormVisibility('auto'); validateForm(autoCalcForm, autoCalcButton, false); } if (mode === 'manual') { updateFormVisibility('manual'); validateForm(manualCalcForm, manualCalcButton, false); } if (mode === 'converter') handleConversion(); }
function updateFormVisibility(mode) { const goldType = document.querySelector(`input[name="gold-type-${mode}-tabs"]:checked`).value; const caratSelectGroup = document.getElementById(`carat-select-group-${mode}`); caratSelectGroup.classList.toggle('hidden', goldType === 'آب‌شده'); caratSelectGroup.classList.toggle('carat-locked', goldType === 'دست دوم'); if (goldType === 'دست دوم') { const carat18Radio = document.getElementById(`carat-${mode}-750`); if (carat18Radio) carat18Radio.checked = true; } document.getElementById(`commission-group-${mode}`).classList.toggle('hidden', goldType !== 'نو/زینتی'); document.getElementById(`profit-group-${mode}`).classList.toggle('hidden', goldType === 'آب‌شده'); document.getElementById(`tax-group-${mode}`).classList.toggle('hidden', goldType === 'آب‌شده'); document.getElementById(`carat-input-group-${mode}`).classList.toggle('hidden', goldType !== 'آب‌شده'); if (mode === 'manual') updateManualPriceHelper(); }
function applyInitialTheme() { const theme = localStorage.getItem("theme") || "light"; document.body.classList.toggle("dark-mode", theme === "dark"); updateThemeIcons(theme); }
function toggleTheme() { const isDarkMode = document.body.classList.toggle("dark-mode"); const newTheme = isDarkMode ? "dark" : "light"; localStorage.setItem("theme", newTheme); updateThemeIcons(newTheme); }
function updateThemeIcons(theme) { if (sunIcon && moonIcon) { sunIcon.classList.toggle("hidden", theme === "dark"); moonIcon.classList.toggle("hidden", theme === "light"); } }
function setupParticleAnimation() { const canvas = document.getElementById("particle-canvas"); if (!canvas) return; const ctx = canvas.getContext("2d"); let particlesArray; function setCanvasSize() { canvas.width = window.innerWidth; canvas.height = window.innerHeight; } class Particle { constructor() { this.x = Math.random() * canvas.width; this.y = Math.random() * canvas.height; this.size = Math.random() * 2.5 + 1; this.speedX = Math.random() * 0.8 - 0.4; this.speedY = Math.random() * 0.8 - 0.4; } update() { this.x += this.speedX; this.y += this.speedY; if (this.x > canvas.width + 5) this.x = -5; if (this.x < -5) this.x = canvas.width + 5; if (this.y > canvas.height + 5) this.y = -5; if (this.y < -5) this.y = canvas.height + 5; } draw() { ctx.beginPath(); const g = ctx.createRadialGradient(this.x, this.y, 0, this.x, this.y, this.size); g.addColorStop(0, "rgba(212, 175, 55, 0.8)"); g.addColorStop(1, "rgba(212, 175, 55, 0)"); ctx.fillStyle = g; ctx.arc(this.x, this.y, this.size * 2, 0, Math.PI * 2); ctx.fill(); } } function initParticles() { setCanvasSize(); particlesArray = []; const n = (canvas.height * canvas.width) / 9000; for (let i = 0; i < n; i++) particlesArray.push(new Particle()); } function animateParticles() { ctx.clearRect(0, 0, canvas.width, canvas.height); particlesArray.forEach(p => { p.update(); p.draw(); }); requestAnimationFrame(animateParticles); } initParticles(); animateParticles(); window.addEventListener("resize", () => { clearTimeout(window.resizedFinished); window.resizedFinished = setTimeout(initParticles, 150); }); }
function validateSingleInput(input, showRequiredError = false) { const value = cleanNumber(input.value); const errorElement = document.getElementById(input.id + '-error'); let errorMessage = ''; const isOptional = input.closest('.form-group.hidden') || ['commission', 'profit', 'tax'].some(id => input.id.includes(id)); let isValid = true; if (value.trim() === '' && !isOptional) { if (showRequiredError) errorMessage = 'این فیلد الزامی است.'; isValid = false; } else if (value.trim() !== '' && !/^\d*[\.\,]?\d*$/.test(value)) { errorMessage = 'لطفا فقط از اعداد استفاده کنید.'; isValid = false; } else if (value.trim() !== '') { const numValue = parseFloat(value.replace(/,/g, '.')); if (numValue < 0) { errorMessage = 'مقدار نمی‌تواند منفی باشد.'; isValid = false; } else if (numValue === 0 && !isOptional) { errorMessage = 'مقدار باید بزرگتر از صفر باشد.'; isValid = false; } else if (input.id.includes('carat') && (numValue > 1000 || numValue < 1)) { errorMessage = 'عیار باید بین ۱ تا ۱۰۰۰ باشد.'; isValid = false; } else if (input.id.includes('weight') && numValue > 10000) { errorMessage = 'وزن بیش از حد زیاد است.'; isValid = false; } } input.classList.toggle('input-error', !!errorMessage); if (errorElement) errorElement.textContent = errorMessage; return isValid; }
function validateForm(form, button, showRequiredError = false) { const inputs = form.querySelectorAll('.calc-input'); let isFormValid = true; inputs.forEach(input => { if (!input.closest('.form-group.hidden') && !validateSingleInput(input, showRequiredError)) isFormValid = false; }); if (button) button.disabled = !isFormValid; return isFormValid; }
function clearForm(form, button, resultElement) { const inputs = form.querySelectorAll('input[type="tel"]'); inputs.forEach(input => { input.value = ''; input.classList.remove('input-error'); const errorElement = document.getElementById(input.id + '-error'); if (errorElement) errorElement.textContent = ''; }); resultElement.innerHTML = '<p>برای مشاهده نتیجه، اطلاعات را وارد کرده و روی دکمه محاسبه کلیک کنید.</p>'; validateForm(form, button, false); }
function getFormValues(mode) { const goldType = document.querySelector(`input[name="gold-type-${mode}-tabs"]:checked`).value; let carat = 0; if (goldType === 'دست دوم') { carat = 750; } else if (goldType === 'آب‌شده') { carat = parseFloat(cleanNumber(document.getElementById(`carat-${mode}`).value)) || 0; } else { const radio = document.querySelector(`input[name="carat-${mode}-tabs"]:checked`); carat = radio ? parseFloat(radio.value) : 0; } return { goldType, weight: parseFloat(cleanNumber(document.getElementById(`weight-${mode}`).value)) || 0, carat, commission: parseFloat(cleanNumber(document.getElementById(`commission-${mode}`).value)) || 0, profit: parseFloat(cleanNumber(document.getElementById(`profit-${mode}`).value)) || 0, tax: parseFloat(cleanNumber(document.getElementById(`tax-${mode}`).value)) || 0, }; }
function calculate(values, basePrice, isAuto) { if (!basePrice || basePrice <= 0) { resultDiv.innerHTML = '<p class="error">قیمت پایه نامعتبر است. لطفاً لحظاتی بعد دوباره تلاش کنید.</p>'; return; } if (!isValidInput(values.weight, values.carat)) { resultDiv.innerHTML = '<p class="error">لطفا وزن و عیار معتبر وارد کنید.</p>'; return; } let baseValue = 0, wageAmount = 0, profitAmount = 0, taxAmount = 0, finalValue = 0; baseValue = values.weight * (basePrice / 750) * values.carat; if (values.goldType === 'نو/زینتی') { wageAmount = baseValue * (values.commission / 100); profitAmount = (baseValue + wageAmount) * (values.profit / 100); taxAmount = (wageAmount + profitAmount) * (values.tax / 100); } else if (values.goldType === 'دست دوم') { profitAmount = baseValue * (values.profit / 100); taxAmount = profitAmount * (values.tax / 100); } finalValue = baseValue + wageAmount + profitAmount + taxAmount; let priceDescription = 'مبنای هر گرم ۱۸ عیار'; if (values.goldType === 'دست دوم') { priceDescription = 'قیمت هر گرم دست دوم'; } const calcType = `با قیمت ${isAuto ? 'لحظه‌ای' : 'دستی'} (${priceDescription}: ${formatterPrice(basePrice)} تومان)`; lastCalculationResult = { ...values, baseValue, wageAmount, profitAmount, taxAmount, finalValue, basePriceUsed: basePrice }; resultDiv.innerHTML = createResultTable(lastCalculationResult, calcType); }
function calculateAuto(showErrors = false) { if (validateForm(autoCalcForm, autoCalcButton, showErrors)) { const values = getFormValues('auto'); const basePrice = values.goldType === 'دست دوم' ? goldPrices["طلای دست دوم"]?.price : goldPrices["طلای 18 عیار"]?.price; calculate(values, basePrice, true); } }
function calculateManual(showErrors = false) { if (validateForm(manualCalcForm, manualCalcButton, showErrors)) { let manualPrice = parseFloat(cleanNumber(document.getElementById('price-manual').value)); const selectedCaratRadio = document.querySelector('input[name="carat-manual-tabs"]:checked'); const goldType = document.querySelector('input[name="gold-type-manual-tabs"]:checked')?.value; if (goldType !== 'آب‌شده' && selectedCaratRadio && selectedCaratRadio.value === '999') { manualPrice = manualPrice * (750 / 999); } calculate(getFormValues('manual'), manualPrice, false); } }
function createResultTable(data, calcType) { let tableHTML = `<p style="font-size: 0.875rem; color: var(--text-light-color); text-align:center;">${calcType}</p><table style="width: 100%;" class="result-table"><tbody><tr><td>ارزش خام طلا</td><td>${formatterPrice(data.baseValue.toFixed(0))} تومان</td></tr>`; if (data.goldType === 'آب‌شده') { const equivalentWeight750 = (data.weight * data.carat) / 750; tableHTML += `<tr><td>معادل طلای ۱۸ عیار</td><td>${formatterPrice(equivalentWeight750.toFixed(6))} گرم</td></tr>`; } if (data.goldType === 'نو/زینتی') { tableHTML += `<tr><td>+ اجرت ساخت (${data.commission || 0}٪)</td><td>${formatterPrice(data.wageAmount.toFixed(0))} تومان</td></tr>`; } if (data.goldType !== 'آب‌شده') { tableHTML += `<tr><td>+ سود فروشنده (${data.profit || 0}٪)</td><td>${formatterPrice(data.profitAmount.toFixed(0))} تومان</td></tr><tr><td>+ مالیات (${data.tax || 0}٪)</td><td>${formatterPrice(data.taxAmount.toFixed(0))} تومان</td></tr>`; } tableHTML += `<tr class="final-row"><td>مبلغ نهایی</td><td><b data-final-value>0</b> <b>تومان</b></td></tr></tbody></table><button id="add-to-portfolio-btn">افزودن به سبد دارایی</button>`; setTimeout(() => { const finalValueElement = resultDiv.querySelector('[data-final-value]'); if (finalValueElement) animateCounter(finalValueElement, 0, data.finalValue); }, 0); return tableHTML; }
function animateCounter(element, start, end, isItemPl = false, isTotalPl = false) { if (start === end) { if (isItemPl) { const plClass = end >= 0 ? 'profit' : 'loss'; const plIcon = end > 1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 14l5-5 5 5z"/></svg>` : end < -1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 10l5 5 5-5z"/></svg>` : ''; if (element.parentElement) element.parentElement.className = `history-item-pl ${plClass}`; element.innerHTML = `${plIcon} ${formatterPrice(Math.abs(end).toFixed(0))}`; } else if (isTotalPl) { const plClass = end >= 0 ? 'profit' : 'loss'; element.className = `profit-loss-value ${plClass}`; element.innerHTML = `${formatterPrice(Math.abs(end).toFixed(0))} تومان`; } else { element.innerHTML = formatterPrice(end); } return; } let startTimestamp = null; const duration = 800; const step = (timestamp) => { if (!startTimestamp) startTimestamp = timestamp; const progress = Math.min((timestamp - startTimestamp) / duration, 1); const current = Math.floor(progress * (end - start) + start); if (isItemPl) { const plClass = current >= 0 ? 'profit' : 'loss'; const plIcon = current > 1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 14l5-5 5 5z"/></svg>` : current < -1 ? `<svg width="12" height="12" viewBox="0 0 24 24" fill="currentColor"><path d="M7 10l5 5 5-5z"/></svg>` : ''; if (element.parentElement) element.parentElement.className = `history-item-pl ${plClass}`; element.innerHTML = `${plIcon} ${formatterPrice(Math.abs(current).toFixed(0))}`; } else if (isTotalPl) { const plClass = current >= 0 ? 'profit' : 'loss'; element.className = `profit-loss-value ${plClass}`; element.innerHTML = `${formatterPrice(Math.abs(current).toFixed(0))} تومان`; } else { element.innerHTML = formatterPrice(current); } if (progress < 1) window.requestAnimationFrame(step); }; window.requestAnimationFrame(step); }
async function fetchPricesFromTgju(isInitialLoad = false) { clearTimeout(retryTimeout); autoCalcButton.disabled = true; calculateCurrencyBtn.disabled = true; prevGoldPrices = JSON.parse(JSON.stringify(goldPrices)); const goldItemIds = ['137121', '137122', '391295', '137120']; const currencyItemIds = Object.values(CURRENCY_INFO).map(c => c.id); const allItemIds = [...new Set([...goldItemIds, ...currencyItemIds])].join(','); try { const response = await fetch(`${TGJU_PROXY_URL}?url=${encodeURIComponent(`https://api.tgju.org/v1/widget/tmp?keys=${allItemIds}`)}`); if (!response.ok) throw new Error(`Request failed: ${response.status}`); const data = await response.json(); if (!data || !data.response || !Array.isArray(data.response.indicators)) throw new Error("Invalid API data"); clearInterval(retryCountdownInterval); data.response.indicators.forEach(item => { const priceData = { price: parseFloat(item.p.replace(/,/g, '')), changeAmount: parseFloat(item.d.replace(/,/g, '')), changePercent: item.dp, direction: item.dt }; if ([...currencyItemIds, '137120', '137121', '137122', '391295'].includes(String(item.item_id))) { priceData.price /= 10; priceData.changeAmount /= 10; } if (isNaN(priceData.price)) return; const keyMap = { '137121': "طلای 18 عیار", '137122': "طلای 24 عیار", '391295': "طلای دست دوم", '137120': "مثقال طلا" }; if (keyMap[item.item_id]) goldPrices[keyMap[item.item_id]] = priceData; for (const [name, info] of Object.entries(CURRENCY_INFO)) { if (String(item.item_id) === info.id) { goldPrices[name] = priceData; break; } } }); localStorage.setItem(CACHED_PRICES_KEY, JSON.stringify({ prices: goldPrices, timestamp: new Date().toISOString() })); displayPrices(); updateCurrencyUI(); updateManualPriceHelper(); loadPortfolio(isInitialLoad); lastUpdateTime = new Date(); displayUpdateStatus(); startPriceUpdateCycle(); validateForm(autoCalcForm, autoCalcButton, false); validateCurrencyForm(false); } catch (error) { console.error("Critical error fetching data:", error); handleFetchError(isInitialLoad); } }
async function handleFetchError(isInitialLoad) { clearTimeout(retryTimeout); clearInterval(priceUpdateInterval); clearInterval(countdownInterval); clearInterval(retryCountdownInterval); const cachedData = JSON.parse(localStorage.getItem(CACHED_PRICES_KEY)); if (cachedData && cachedData.prices) { Object.assign(goldPrices, cachedData.prices); lastUpdateTime = new Date(cachedData.timestamp); showToast('خطا در دریافت قیمت. از آخرین داده ذخیره‌شده استفاده شد.', 'warning'); displayPrices(); updateCurrencyUI(); updateManualPriceHelper(); loadPortfolio(isInitialLoad); } else { priceTable.innerHTML = '<tr><td colspan="2" class="error">خطا در دریافت قیمت‌ها.</td></tr>'; showToast('خطا در دریافت قیمت‌ها', 'error'); showPortfolioSkeletons(); } startErrorRetryCountdown(); }
function startErrorRetryCountdown() { let secondsRemaining = RETRY_INTERVAL / 1000; displayUpdateStatus(false, `خطا. تلاش مجدد تا <span id="retry-countdown" class="countdown-timer">${secondsRemaining}</span> ثانیه...`); retryCountdownInterval = setInterval(() => { secondsRemaining--; const countdownElement = document.getElementById('retry-countdown'); if (countdownElement) countdownElement.textContent = secondsRemaining; if (secondsRemaining <= 0) { clearInterval(retryCountdownInterval); fetchPricesFromTgju(false); } }, 1000); }
function displaySkeletonLoader() { let skeletonHTML = '<tbody>'; for (let i = 0; i < 8; i++) { skeletonHTML += `<tr><td><div class="skeleton skeleton-text"></div></td><td><div class="price-cell-content"><div class="skeleton skeleton-text"></div><div class="skeleton skeleton-text short"></div></div></td></tr>`; } skeletonHTML += '</tbody>'; priceTable.innerHTML = `<thead><tr><th>نوع</th><th>قیمت (تومان)</th></tr></thead>${skeletonHTML}`; }
function displayPrices() { const tbody = document.createElement("tbody"); const nameMap = { "طلای 18 عیار": "گرم طلای ۱۸ عیار (۷۵۰)", "طلای 24 عیار": "گرم طلای ۲۴ عیار", "طلای دست دوم": "گرم طلای دست دوم", "مثقال طلا": "مثقال طلا", ...Object.fromEntries(Object.entries(CURRENCY_INFO).map(([key, val]) => [key, val.name])) }; Object.keys(nameMap).forEach(key => { if (!goldPrices[key]) return; const priceData = goldPrices[key]; const prevPriceData = prevGoldPrices[key]; let flashClass = ''; if (priceData && prevPriceData && priceData.price !== prevPriceData.price) flashClass = priceData.price > prevPriceData.price ? 'flash-up' : 'flash-down'; const row = tbody.insertRow(); row.className = flashClass; row.insertCell(0).textContent = nameMap[key]; const priceCell = row.insertCell(1); if (priceData) { let directionClass = ''; let arrowHTML = ''; const changeAmount = priceData.changeAmount || 0; if (changeAmount !== 0 && priceData.direction) { const direction = String(priceData.direction).trim().toLowerCase(); if (direction === 'high') directionClass = 'up'; else if (direction === 'low') directionClass = 'low'; } if (directionClass) arrowHTML = `<span class="price-change-arrow"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 12 8"><path fill="none" stroke="currentcolor" stroke-linecap="round" stroke-width="2" d="m1 6 5-4 5 4"></path></svg></span>`; const changeAmountDisplay = formatterPrice(Math.abs(changeAmount)); const changeHTML = `<div class="price-change ${directionClass}">${arrowHTML}<span class="change-amount">${changeAmountDisplay}</span><span class="change-percent">(${priceData.changePercent}%)</span></div>`; priceCell.innerHTML = `<div class="price-cell-content"><span class="price-value">${formatterPrice(priceData.price)}</span>${changeHTML}</div>`; } else { priceCell.innerHTML = `<span class="price-value">نامشخص</span>`; } }); priceTable.innerHTML = '<thead><tr><th>نوع</th><th>قیمت (تومان)</th></tr></thead>'; priceTable.appendChild(tbody); }
function displayUpdateStatus(isCached = false, customMessage = '') { const container = document.getElementById("update-status-container"); if (!container) return; let timeTextHTML = ''; if (customMessage) { timeTextHTML = `<span class="stale-prices">${customMessage}</span>`; } else if (lastUpdateTime) { const timeFormatted = new Intl.DateTimeFormat("fa-IR", { dateStyle: "medium", timeStyle: "short" }).format(lastUpdateTime); timeTextHTML = `آخرین به‌روزرسانی: ${timeFormatted}${isCached ? ' (ذخیره شده)' : ''} <span id="countdown-timer" class="countdown-timer"></span>`; } container.innerHTML = `<div class="update-status"><button onclick="window.refreshPrices(true)" class="refresh-btn" title="دریافت قیمت جدید"><svg class="refresh-icon" xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><path d="M3 12a9 9 0 0 1 9-9 9.75 9.75 0 0 1 6.74 2.74L21 8"></path><path d="M21 3v5h-5"></path><path d="M21 12a9 9 0 0 1-9 9 9.75 9.75 0 0 1-6.74-2.74L3 16"></path><path d="M8 16H3v5"></path></svg></button><div class="time-text" id="time-text-container">${timeTextHTML}</div></div>`; }
window.refreshPrices = function (isUserInitiated = false) { autoCalcButton.disabled = true; calculateCurrencyBtn.disabled = true; displaySkeletonLoader(); if (isUserInitiated) { showPortfolioSkeletons(); } const statusContainer = document.getElementById("update-status-container"); if (statusContainer) statusContainer.innerHTML = ""; lastCurrentPortfolioPL = null; lastTotalPortfolioPL = null; fetchPricesFromTgju(isUserInitiated); }
function startPriceUpdateCycle() { clearInterval(priceUpdateInterval); clearInterval(countdownInterval); priceUpdateInterval = setInterval(() => window.refreshPrices(false), REFRESH_INTERVAL); let countdown = REFRESH_INTERVAL; const updateCountdown = () => { const timerElement = document.getElementById('countdown-timer'); if (!timerElement) { clearInterval(countdownInterval); return; } countdown -= 1000; const minutes = Math.floor(countdown / 60000); const seconds = Math.floor((countdown % 60000) / 1000); timerElement.textContent = `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`; if (countdown <= 0) countdown = REFRESH_INTERVAL; }; updateCountdown(); countdownInterval = setInterval(updateCountdown, 1000); }
function setupCurrencyCalculator() { document.querySelectorAll('input[name="currency-tabs"], input[name="price-mode-tabs"]').forEach(radio => radio.addEventListener('change', updateCurrencyUI));[currencyAmountInput, currencyManualPriceInput].forEach(input => { input.addEventListener('input', () => { if (input === currencyManualPriceInput) formatNumberInput(input); validateCurrencyForm(false); }); }); calculateCurrencyBtn.addEventListener('click', () => calculateAndSaveCurrency(true)); updateCurrencyUI(); }
function updateCurrencyUI() { const selectedCurrencyName = document.querySelector('input[name="currency-tabs"]:checked').value; const priceMode = document.querySelector('input[name="price-mode-tabs"]:checked').value; currencyAmountLabel.textContent = `مقدار (${selectedCurrencyName})`; const isManual = priceMode === 'manual'; calculateCurrencyBtn.textContent = isManual ? 'محاسبه با قیمت دستی' : 'محاسبه با قیمت لحظه‌ای'; currencyManualPriceGroup.classList.toggle('hidden', !isManual); currencyLivePriceDisplay.classList.toggle('is-invisible', isManual); if (!isManual) { const livePriceData = goldPrices[selectedCurrencyName]; livePriceValueSpan.textContent = livePriceData ? formatterPrice(livePriceData.price) : 'نامشخص'; } else { updateCurrencyManualPriceHelper(); } validateCurrencyForm(false); }
function validateCurrencyForm(showRequiredError = true) { let isFormValid = true; if (!validateSingleInput(currencyAmountInput, showRequiredError)) isFormValid = false; const priceMode = document.querySelector('input[name="price-mode-tabs"]:checked').value; if (priceMode === 'manual') { if (!validateSingleInput(currencyManualPriceInput, showRequiredError)) isFormValid = false; } else { if (!goldPrices[document.querySelector('input[name="currency-tabs"]:checked').value]) isFormValid = false; } calculateCurrencyBtn.disabled = !isFormValid; return isFormValid; }
function clearCurrencyForm() { currencyAmountInput.value = ''; currencyManualPriceInput.value = ''; currencyResultDiv.innerHTML = '<p>برای مشاهده نتیجه، اطلاعات را وارد کرده و روی دکمه محاسبه کلیک کنید.</p>'; validateCurrencyForm(false); }
function calculateAndSaveCurrency(showErrors = true) { if (!validateCurrencyForm(showErrors)) return; const currencyName = document.querySelector('input[name="currency-tabs"]:checked').value; const priceMode = document.querySelector('input[name="price-mode-tabs"]:checked').value; const amount = parseFloat(cleanNumber(currencyAmountInput.value)); let price = 0; if (priceMode === 'manual') { price = parseFloat(cleanNumber(currencyManualPriceInput.value)); } else { price = goldPrices[currencyName]?.price || 0; } if (!amount || amount <= 0 || !price || price <= 0) { currencyResultDiv.innerHTML = '<p class="error">مقدار و قیمت باید معتبر باشند.</p>'; return; } const finalValue = amount * price; lastCalculationResult = { goldType: 'ارز', currencyName, amount, basePriceUsed: price, finalValue }; let resultHTML = `<p>${formatterPrice(amount)} ${currencyName} = <b data-final-value>0</b> <b>تومان</b></p><button id="add-to-portfolio-btn">افزودن به سبد دارایی</button>`; currencyResultDiv.innerHTML = resultHTML; setTimeout(() => { const finalValueElement = currencyResultDiv.querySelector('[data-final-value]'); if (finalValueElement) animateCounter(finalValueElement, 0, finalValue); }, 0); }
function handleConversion() { const value = parseFloat(cleanNumber(converterValueInput.value)) || 0; if (value <= 0) { converterResultDiv.innerHTML = `<p>نتیجه تبدیل در اینجا نمایش داده می‌شود.</p>`; return; } const fromUnitRadio = document.querySelector('input[name="from-unit-tabs"]:checked'); const toUnitRadio = document.querySelector('input[name="to-unit-tabs"]:checked'); if (!fromUnitRadio || !toUnitRadio) return; const result = convertUnits(value, fromUnitRadio.value, toUnitRadio.value); const fromLabel = document.querySelector(`label[for="${fromUnitRadio.id}"]`).textContent; const toLabel = document.querySelector(`label[for="${toUnitRadio.id}"]`).textContent; converterResultDiv.innerHTML = `<p>${formatterPrice(value)} ${fromLabel} = <br><b>${formatterPrice(result.toFixed(6))} ${toLabel}</b></p>`; }
function convertUnits(value, from, to) { const purities = { '705': 0.705, '750': 0.750, '999': 0.999 }; const [fromType, fromKarat] = from.split('_'); const pureGoldGrams = fromType === 'gram' ? value * purities[fromKarat] : (value * MESGHAL_TO_GRAM) * purities[fromKarat]; const [toType, toKarat] = to.split('_'); return toType === 'gram' ? pureGoldGrams / purities[toKarat] : (pureGoldGrams / purities[toKarat]) / MESGHAL_TO_GRAM; }
function formatNumberInput(input) { let v = cleanNumber(input.value); if (v) input.value = new Intl.NumberFormat('en-US', { useGrouping: true }).format(v); else input.value = ''; }
function formatterPrice(p) { return (p === null || typeof p === 'undefined' || isNaN(p)) ? 'نامشخص' : new Intl.NumberFormat('fa-IR').format(p); }
function isValidInput(w, c) { return !isNaN(w) && !isNaN(c) && w > 0 && c <= 1000; }
function cleanNumber(s) { return String(s).replace(/,/g, '').replace(/،/g, '.'); }
function showToast(message, type = 'success') { const toast = document.createElement('div'); toast.className = `toast ${type}`; toast.textContent = message; toastContainer.appendChild(toast); setTimeout(() => toast.remove(), 3000); }


